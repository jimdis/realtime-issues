!function(e){var t={};function s(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,s),r.l=!0,r.exports}s.m=e,s.c=t,s.d=function(e,t,o){s.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},s.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.t=function(e,t){if(1&t&&(e=s(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(s.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)s.d(o,r,function(t){return e[t]}.bind(null,r));return o},s.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(t,"a",t),t},s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s.p="",s(s.s=0)}([function(e,t,s){"use strict";s.r(t);const o="/api/",r="https://65fc704f.ngrok.io/api";let a={};async function n(e){console.log("Getting Data from: "+e);let t=await fetch(o+e);return t=await t.json(),console.log("Returning Data",t),t}async function i(e){let t=await n(`repos/${e.full_name}/issues`),s=[];t.forEach(e=>{let t={};t.id=e.id,t.title=e.title,t.username=e.user.login,t.avatar=e.user.avatar_url,t.body=e.body,t.url=e.html_url,t.comments=e.comments,s.push(t)}),e.issues=s}async function l(){$(".fixed-action-btn").removeClass("hide"),$(".tooltipped").tooltip(),$("#issuesDiv").append($("#reposTemplate").html()),await async function(){let e=await n("user");a.avatar=e.avatar_url,a.name=e.name}(),$("#issues-wrapper").removeClass("hide"),$("#reposHeader").addClass("rendered"),$("#user-preloader").remove(),$("#issuesDiv .collection").removeClass("hide"),$("#issuesDiv img.gh-avatar").attr("src",a.avatar),$("#gh-name-repos").text(`${a.name}'s Repos with open issues`),await async function(){let e=await n("user/repos");a.repos=[],e.forEach(e=>{if(e.open_issues_count>0){let t={};t.id=e.id,t.full_name=e.full_name,t.description=e.description,a.repos.push(t)}})}(),$("#repo-preloader").remove(),a.repos.forEach(e=>{let t=document.querySelector("#repoListTemplate").content.cloneNode(!0);t.querySelector(".repo-title").textContent=`Repo: ${e.full_name}`,t.querySelector(".repo-description").textContent=e.description,t.querySelector("a").setAttribute("data-issues",e.id),$("#issuesDiv div.collection").append(t),async function(e){let t=(await n(`repos/${e.full_name}/hooks`)).find(e=>e.config.url===r);t&&(e.hookID=t.id,document.querySelector(`#issues-${e.id}`)&&c("on"))}(e)}),$("#issuesDiv div.collection a").click(e=>{e.preventDefault(),$("a.collection-item").removeClass("active"),$(e.currentTarget).addClass("active"),u($(e.currentTarget).data("issues"))})}async function u(e){let t=a.repos.find(t=>t.id===e);$("#issues-wrapper .issuesCollection").remove(),$("#reposHeader").after($("#issuesTemplate").html()),$("#issues-wrapper .issuesCollection").attr("id",`issues-${t.id}`),$("#issues-wrapper .issuesCollection .title").text(`Issues in ${t.full_name}`),t.hookID&&c("on"),t.issues||await i(t),$("#issues-preloader").remove(),t.issues.forEach(e=>{let t=document.querySelector("#issuesListTemplate").content.cloneNode(!0);t.querySelector(".title").textContent=e.title,t.querySelector(".gh-avatar").src=e.avatar,t.querySelector(".gh-avatar").title=e.username,t.querySelector(".body").textContent=e.body?e.body:"No description provided :(",t.querySelector("a").href=e.url,t.querySelector(".badge").textContent=e.comments,$("#issues-wrapper .issuesCollection ul").append(t)}),$("#issues-wrapper .tooltipped").tooltip(),$("#issues-wrapper .notificationIcon").click(e=>{e.preventDefault(),async function(e){if(e.hookID){let t=await async function(e,t){return 204===(await fetch(`api/repo/?wh=true&path=${e}&action=delete&id=${t}`)).status}(e.full_name,e.hookID);t?(e.hookID=null,c("off"),M.toast({html:'<span class="green-text">Alert removed!</span>'})):M.toast({html:'<span class="red-text">There was a problem removing the alert</span>'})}else{let t=await async function(e){let t=await fetch(`api/repo/?wh=true&path=${e}&action=create`);if((t=await t.json()).active)return t}(e.full_name);t?(e.hookID=t.id,c("on"),M.toast({html:'<span class="green-text">Alert created!</span>'})):M.toast({html:'<span class="red-text">There was a problem creating the alert</span>'})}}(t)}),$("#issues-wrapper .issueListClose").click(e=>{e.preventDefault(),$("a.collection-item").removeClass("active"),$("#issues-wrapper .issuesCollection").remove()})}function c(e){"on"===e&&($("#issues-wrapper .notificationIcon").removeClass("red"),$("#issues-wrapper .notificationIcon").addClass("green"),$("#issues-wrapper .notificationIcon").attr("data-badge-caption","on"),$("#issues-wrapper .notificationIcon").attr("data-tooltip","Remove issue notifications for this repo")),"off"===e&&($("#issues-wrapper .notificationIcon ").removeClass("green"),$("#issues-wrapper .notificationIcon ").addClass("red"),$("#issues-wrapper .notificationIcon ").attr("data-badge-caption","off"),$("#issues-wrapper .notificationIcon").attr("data-tooltip","Remove issue notifications for this repo"))}async function p(){let e=await fetch("auth/session");(e=await e.json()).active?async function(){let e=await fetch("auth/status");e=await e.json(),$("#main-preloader").remove(),e.authorized?(a.username=e.username,$("#index-banner .badge span").text(a.username),$("#index-banner .badge").removeClass("hide"),$("#index-banner").addClass("logged-in"),l()):($("#index-banner .row").removeClass("hide"),$("#errorMessage").removeClass("hide"),$("#mainButton").text("Authorize again through GitHubÂ»"))}():($("#index-banner .row, #subTitle").removeClass("hide"),$("#main-preloader").remove())}io().on("issue",async e=>{if(e.issue){!function(e){let t=document.querySelector("#newIssueTemplate").content.cloneNode(!0),s=`card-${Math.random().toString(36).replace("0.","")}`;t.firstElementChild.id=s,t.querySelector(".newIssueTitle").textContent=`${e.comment?"Comment":"Issue"} ${e.action}`,t.querySelector(".gh-avatar").src=e.sender.avatar_url,t.querySelector(".newIssueBody").textContent=`${e.sender.login} just ${e.action} ${e.comment?" a Comment":"an Issue"} in ${e.repository.name}`,t.querySelector(".newIssueGoto").href=e.comment?e.comment.html_url:e.issue.html_url,$("#newIssuesDiv").append(t),$(`#${s} .newIssueDismiss`).click(e=>{e.preventDefault(),$(`#${s}`).remove()})}(e);let t=a.repos.find(t=>t.id===e.repository.id);await i(t),document.querySelector(`#issues-${t.id}`)&&u(t.id)}}),$(document).ready(()=>p())}]);